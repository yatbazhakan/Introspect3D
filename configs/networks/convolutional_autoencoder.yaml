layers:
  # Encoder
  - type: "Conv2d"
    params:
      in_channels: 64  # Adjust based on your input data
      out_channels: 16
      kernel_size: 3
      stride: 2
      padding: 1

  - type: "ReLU"
    params: {}

  - type: "Conv2d"
    params:
      in_channels: 16
      out_channels: 32
      kernel_size: 3
      stride: 2
      padding: 1

  - type: "ReLU"
    params: {}

  # Bottleneck
  - type: "Flatten"
    params: {}

  - type: "Linear"
    params:
      in_features: 2048  # Example value, adjust based on the flattened size
      out_features: 256

  - type: "ReLU"
    params: {}

  # Decoder
  - type: "Linear"
    params:
      in_features: 256
      out_features: 2048  # Match this with the above flattened size

  - type: "ReLU"
    params: {}

  - type: "Unflatten"
    params:
      shape: [32, 8, 8]  # Adjust to match the Conv2d layer before flattening

  - type: "ConvTranspose2d"
    params:
      in_channels: 32
      out_channels: 16
      kernel_size: 3
      stride: 2
      padding: 1
      output_padding: 1

  - type: "ReLU"
    params: {}

  - type: "ConvTranspose2d"
    params:
      in_channels: 16
      out_channels: 3  # Adjust to match your input data's channels
      kernel_size: 3
      stride: 2
      padding: 1
      output_padding: 1

  - type: "Sigmoid"  # or "ReLU", depending on your data range
    params: {}
